/*------------------------------------*\
    Aleut is a fork of [inuit.css](http://inuitcss.com/)
    This is starter where we import all the packages from aleut into this style-sheet.
    These files we can not change. However these are heavily based on SCSS variables, so we can change
    these by supplying the specific SCSS-variable before we import each SCSS-file.
    By default most of aleut is turned off, so we need to turn on each class via variables before importing.
    We have structured the CSS in a specific way to avoid specificity-problems.
    Basically we are first targetting elements without class-names etc,
    then we are applying abstract patterns before we apply most of our own styles and
    in the end helper-classes and layouts that should overwrite everything else..
    All classes are also have namespaces. This means that you by looking at the prefix-of the class can
    see where it is located and whether you can modify the file or not.
    Read http://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/ for more information
\*------------------------------------*/


/*------------------------------------*\
    #SETTINGS
    Global variables, site-wide settings, config switches, etc.
    These are just for SCSS – nothing here gets compiled to CSS directly
\*------------------------------------*/

@import "aleut/settings.vars"; //here we override some of the variables down the line
@import "~aleut.settings.defaults/settings.defaults";
@import "~aleut.settings.responsive/settings.responsive";
@import "aleut/settings.fonts";
//++ our own remaps of inuits variables


/*------------------------------------*\
    #TOOLS
    Site-wide mixins and functions.
    These are just for SCSS - nothing here gets directly compiled to CSS.
\*------------------------------------*/

@import "~aleut.tools.functions/tools.functions";
@import "~aleut.tools.mixins/tools.mixins";
@import "~aleut.tools.responsive/tools.responsive";
@import "~aleut.tools.widths/tools.widths";
@import "~aleut.tools.clearfix/tools.clearfix";
@import "aleut/tools.mixins"; //++ Our additional mixins
//++ Our additional functions



/*------------------------------------*\
    #GENERIC
    Low-specificity, far-reaching rulesets (e.g. resets).
    Here we have our basic resets
\*------------------------------------*/

@import "~aleut.generic.normalize/generic.normalize";
@import "~aleut.generic.reset/generic.reset";
@import "~aleut.generic.box-sizing/generic.box-sizing";
//@import "aleut.generic.shared/generic.shared";
@import "aleut/generic.fonts"; // Site-wide font settings


/*------------------------------------*\
    #BASE
    Unclassed HTML elements (e.g. a {}, blockquote {}, address {}).
    Here we style all our HTML-elements with the basic styling we want.
  https://github.com/aleutcss?query=base
\*------------------------------------*/

@import "~aleut.base.page/base.page";
@import "~aleut.base.images/base.images";
@import "~aleut.base.lists/base.lists";
@import "~aleut.base.headings/base.headings";
//@import "aleut/base.page"; //our own variation of base.page
@import "aleut/base.headings";  // Headings styles
@import "aleut/base.quotes"; // default styles for q tags
@import "aleut/base.forms";

/*------------------------------------*\
    #OBJECTS (o-prefix)
    Objects, abstractions, and design patterns (e.g. .o-media {}).
    Here we import abstractions without styling etc.
    Missing some abstractions? Read trough the SCSS-files imported to turn
    on variables or get new ones from here:
    https://github.com/aleutcss?query=objects.
\*------------------------------------*/

$o-block--center: true;
@import "~aleut.objects.block/objects.block";

$o-box--small:       true;
@import "~aleut.objects.box/objects.box";

$o-btn--pill:        true;
$o-btn--small:       true;
$o-btn--full:        true;
$o-btn-color:        white;
$o-btn-background:   $primary-color;
$o-btn-radius:       5px;
@import "~aleut.objects.buttons/objects.buttons";
@import "~aleut.objects.flag/objects.flag";

$o-layout--small: true;
@import "~aleut.objects.layout/objects.layout";

@import "~aleut.objects.list-bare/objects.list-bare";
//@import "~aleut.objects.list-block/objects.list-block";

$o-list-inline--delimited: true;
$o-list-inline-delimit-character: "\00A0|";
@import "~aleut.objects.list-inline/objects.list-inline";
//@import "~aleut.objects.list-ui/objects.list-ui";

$o-media--small: true;
$o-media--responsive: true;
@import "~aleut.objects.media/objects.media";
//@import "~aleut.objects.pack/objects.pack";
//@import "~aleut.objects.tables/objects.tables";
//@import "~aleut.objects.tabs/objects.tabs";

// Our own objects
@import "aleut/objects/objects.wrapper";

$o-flipper-height: $pledge-tile-height;
@import "aleut/objects/objects.flipper";

@import "aleut/objects/objects.sidebar";
@import "aleut/objects/objects.marginal";


/*------------------------------------*\
    #VENDOR
    Third party CSS for plugins etc.
\*------------------------------------*/

@import "aleut/settings.react-select";  /* Customize react-select here */
@import "~react-select/scss/default";

@import "~react-image-crop/lib/ReactCrop.scss";

@import "~react-datepicker/dist/react-datepicker";
@import "aleut/vendor/vendor.react-datepicker";  /* Overwrites */

@import "aleut/vendor/fontello";


/*------------------------------------*\
    #COMPONENTS (c-prefix)
    Discrete, complete chunks of UI (e.g. `.c-carousel {}`).
    This is the one layer that aleutcss doesn’t get involved with.
    Here you place your own visual styling.
\*------------------------------------*/

@import "aleut/components/components.flash";
@import "aleut/components/components.ruler";
@import "aleut/components/components.masthead";
@import "aleut/components/components.pledge-list";
@import "aleut/components/components.avatar";
@import "aleut/components/components.faq";
@import "aleut/components/components.page-head";
@import "aleut/components/components.primary-nav";
@import "aleut/components/components.secondary-nav";
@import "aleut/components/components.search-bar";
@import "aleut/components/components.page-foot";
@import "aleut/components/components.buttons";
@import "aleut/components/components.tag-list";
@import "aleut/components/components.pledge-data";
@import "aleut/components/components.initiator";
@import "aleut/components/components.pledge-header";
@import "aleut/components/components.pledge-state";
@import "aleut/components/components.progress-bar";
@import "aleut/components/components.pledge-tile";
@import "aleut/components/components.pledge-view";
@import "aleut/components/components.sign-pledge";
@import "aleut/components/components.social-media";
@import "aleut/components/components.btn";
@import "aleut/components/components.comment";
@import "aleut/components/components.signee-list";
@import "aleut/components/components.update-list";
@import "aleut/components/components.sidebar";
@import "aleut/components/components.preview";

/* Forms */
@import "aleut/components/components.devise-form";
@import "aleut/components/components.session";
@import "aleut/components/components.input";
@import "aleut/components/components.number-input";
@import "aleut/components/components.checkbox";
@import "aleut/components/components.textarea";
@import "aleut/components/components.sign-pledge";
@import "aleut/components/components.report-pledge";
@import "aleut/components/components.new-pledge";
@import "aleut/components/components.help";
@import "aleut/components/components.image-input";
@import "aleut/components/components.pledge-form";
@import "aleut/components/components.tooltip";


/*------------------------------------*\
    #Utilities (u-prefix)
    High-specificity, very explicit selectors. Overrides and helper classes (e.g. .u-hidden {})
    Helpers and layout-classes
  https://github.com/aleutcss?query=utilities
\*------------------------------------*/
@import "~aleut.utilities.clearfix/utilities.clearfix";
@import "~aleut.utilities.headings/utilities.headings";
@import "~aleut.utilities.print/utilities.print";

$u-m:                             true;
$u-m-small:                       true;
$u-m-large:                       true;
$u-m-huge:                        true;
$u-p:                             true;
$u-p-tiny:                        true;
@import "~aleut.utilities.spacing/utilities.spacing";

$u-p-responsive-small:            true;
@import "~aleut.utilities.spacing-responsive/utilities.spacing-responsive";
@import "~aleut.utilities.widths/utilities.widths";
@import "~aleut.utilities.widths-responsive/utilities.widths-responsive";
@import "aleut/utilities.helpers";
//++ shame.scss (http://csswizardry.com/2013/04/shame-css/)
